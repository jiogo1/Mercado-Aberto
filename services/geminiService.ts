
import { GoogleGenAI, Modality } from "@google/genai";

// Assume process.env.API_KEY is configured in the environment
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

/**
 * Edits an image using a text prompt with the gemini-2.5-flash-image model.
 * @param base64ImageData The base64-encoded image data.
 * @param mimeType The MIME type of the image (e.g., 'image/jpeg').
 * @param prompt The text prompt describing the desired edit.
 * @returns A promise that resolves to a data URL (base64 string) of the edited image.
 */
export const editImageWithGemini = async (base64ImageData: string, mimeType: string, prompt: string): Promise<string> => {
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: base64ImageData,
              mimeType: mimeType,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        // The API returns a PNG, so we specify image/png here.
        return `data:image/png;base64,${base64ImageBytes}`;
      }
    }

    throw new Error("No image was generated in the response.");
  } catch (error) {
    console.error("Error editing image with Gemini:", error);
    throw new Error("Failed to edit image. Please check the console for more details.");
  }
};

/**
 * Generates an image from a text prompt using the imagen-4.0-generate-001 model.
 * @param prompt The text prompt describing the image to generate.
 * @returns A promise that resolves to a data URL (base64 string) of the generated image.
 */
export const generateImageWithImagen = async (prompt: string): Promise<string> => {
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
              numberOfImages: 1,
              outputMimeType: 'image/jpeg',
              aspectRatio: '1:1',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        }
        
        throw new Error("No image was generated by Imagen.");
    } catch (error) {
        console.error("Error generating image with Imagen:", error);
        throw new Error("Failed to generate image. Please check the console for more details.");
    }
};
